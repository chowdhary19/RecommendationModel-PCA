
# Recommender System Using PCA and Logistic Regression

## Project Overview

This project involves developing a wine recommender system that classifies and recommends wines to new customers. The approach includes clustering the dataset, reducing dimensionality with Principal Component Analysis (PCA), and applying a logistic regression classifier. The model achieves an impressive accuracy of 98%.

## Key Steps

### 1. Importing Libraries
The necessary libraries for data manipulation, visualization, and machine learning are imported.

```python
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
```

### 2. Importing Dataset
The dataset `Wine.csv` is imported, and feature and target variables are extracted.

```python
dataset = pd.read_csv('Wine.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values
```

### 3. Splitting Dataset
The dataset is split into training and test sets.

```python
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)
```

### 4. Feature Scaling
Standardization is applied to the feature variables.

```python
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
```

### 5. Applying PCA
Dimensionality reduction is performed using PCA, reducing the dataset to 2 principal components.

```python
from sklearn.decomposition import PCA
pca = PCA(n_components = 2)
X_train = pca.fit_transform(X_train)
X_test = pca.transform(X_test)
```

### 6. Training Logistic Regression Model
The logistic regression classifier is trained on the training set.

```python
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)
```

### 7. Model Evaluation
The model's performance is evaluated using a confusion matrix and accuracy score.

```python
from sklearn.metrics import confusion_matrix, accuracy_score
y_pred = classifier.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)
```

### 8. Visualization
The results of the model are visualized for both training and test sets.

#### Training Set Visualization
```python
from matplotlib.colors import ListedColormap
X_set, y_set = X_train, y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green', 'blue'))(i), label = j)
plt.title('Logistic Regression (Training set)')
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.legend()
plt.show()
```

#### Test Set Visualization
```python
from matplotlib.colors import ListedColormap
X_set, y_set = X_test, y_test
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green', 'blue'))(i), label = j)
plt.title('Logistic Regression (Test set)')
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.legend()
plt.show()
```

## Results
- **Confusion Matrix:** The confusion matrix is used to describe the performance of the classifier.
- **Accuracy:** The model achieves an accuracy of 98%, indicating its effectiveness in recommending wines to new customers.

## Developer Information
- **Name:** Yuvraj Singh Chowdhary
- **LinkedIn:** [Yuvraj Singh Chowdhary](https://www.linkedin.com/in/yuvraj-singh-chowdhary/)
- **GitHub:** [chowdhary19](https://github.com/chowdhary19)

---

This `imp.txt` file provides a detailed description of the wine recommender system, including steps from data preprocessing to model evaluation.